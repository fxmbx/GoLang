{{template "base" .}}

{{define "title"}}
    Bronze Subscription Plan
{{end}}

{{define "content"}}

{{$widget:= index .Data "widget"}}
<h2 class="mt-3 text-center">Bronze Plan </h2>
<hr/>


<div class="alert alert-danger text-center d-none" id="card-messages"></div>

<form action="/payment-succeeded-temp" method="post" name="charge_form" id="charge_form" class="d-block needs-validation charge-form" autocomplete="off" novalidate="">

<input type="hidden" name="product_id" id="product_id" value="{{$widget.ID}}"/>
<input type="hidden" name="amount"  id="amount" value="{{$widget.Price}}"/>
<h3 class="mt-2 text-center"> {{formatCurrency $widget.Price}}/month</h3>
<p>{{$widget.Description}}</p>
<hr/>



<div class="mb-3"> 
    <label for="first-name" class="form-label">First Name</label>
    <input type="text" class="form-control" id="first-name" name="first_name" required="" autocomplete="first-name-new">
</div>
<div class="mb-3"> 
    <label for="last-name" class="form-label">Last Name</label>
    <input type="text" class="form-control" id="last-name" name="last_name" required="" autocomplete="last-name-new">
</div>

<div class="mb-3"> 
    <label for="cardholder-email" class="form-label">Email</label>
    <input type="email" class="form-control" id="cardholder-email" name="email" required="" autocomplete="cardholder-email-new">
</div>

<div class="mb-3"> 
    <label for="cardholder-name" class="form-label">Name on Card </label>
    <input type="text" class="form-control" id="cardholder-name" name="cardholder_name" required="" autocomplete="cardholder-name-new">
</div>

<div class="mab-3"> 
    <label for="card-element" class="form-label">Credit Card </label>
    <div id="card-element" class="form-control"></div>
    <div class="alert-danger text-center" id="card-errors" role="alert"> </div>
    <div class="alert-success text-center" id="card-success" role="alert"> </div>
</div>

<hr>

<a id="pay-button" href="javascript:void(0);" class="btn btn-primary" onclick="val()">Pay {{formatCurrency $widget.Price}}/per month</a>

<div id="processing-payment" class="text-center d-none">
     <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
     </div>
</div>

<input type="hidden" name="payment_intent" id="payment_intent"/>
<input type="hidden" name="payment_method" id="payment_method"/>
<input type="hidden" name="payment_amount" id="payment_amount"/>
<input type="hidden" name="payment_currency" id="payment_currency"/>
</form>
{{end}}

{{define "js"}}
{{$widget:= index .Data "widget"}}
<script src="https://js.stripe.com/v3/"></script>

<script>
    let card;
    let stripe;
    const cardMessagaes = document.getElementById("card-messages");
    const payBtn = document.getElementById("pay-button")
    const processing = document.getElementById("processing-payment")

    stripe = Stripe({{.StripePublishableKey}}) 

    function showPayButtons(){
        payBtn.classList.remove('d-none')
        processing.classList.add('d-none')
    }

    function showCardError(message){
        cardMessagaes.classList.add("alert-danger")
        cardMessagaes.classList.remove("alert-success")
        cardMessagaes.classList.remove("d-none")
        cardMessagaes.innerText = message
    }
    function showCardSuccess(){
        cardMessagaes.classList.add("alert-success")
        cardMessagaes.classList.remove("d-none")
        cardMessagaes.classList.remove("alert-danger")
        cardMessagaes.innerText = "Transaction Successful"  
    }

    function hidePayBtn() {
        payBtn.classList.add('d-none')
        processing.classList.remove('d-none')
    }

    function val() {
        let form = document.getElementById("charge_form")
        if (form.checkValidity() === false) {
            this.event.preventDefault()
            this.event.stopPropagation()
            form.classList.add('was-validated')
            return
        }
        form.classList.add('was-validated')
        hidePayBtn()
        let amountToCharge =document.getElementById("amount").value

       stripe.createPaymentMethod({
        type: 'card',
        card: card,
        billing_details: {
            email: document.getElementById("cardholder-email").value,
        },
        }).then(stripePaymentMethodHandler)
    }

    function stripePaymentMethodHandler(result){
        if (result.error){
            showCardError(result.error.message)
        }else {
            //create a customer ans subscripbe to plan 
            let payload = {
                plan: '{{$widget.PlanID}}',
                payment_method: result.paymentMethod.id,
                email: document.getElementById("cardholder-email").value,
                last_four: result.paymentMethod.card.last4,
                product_id : document.getElementById("product_id").value,
                card_brand: result.paymentMethod.card.brand,
                expiry_month: result.paymentMethod.card.exp_month,
                expiry_year: result.paymentMethod.card.exp_year,
                first_name : document.getElementById("first-name").value,
                last_name : document.getElementById("last-name").value,
                amount : document.getElementById("amount").value,
                currency : document.getElementById("payment_currency").value,
            }

            const requestOptions = {
                method: 'POST',
                headers : {
                    'Accept' : 'application/json',
                    'Content-Type' :'application/json'
                },
                body : JSON.stringify(payload)
            }      
            
            fetch("{{.API}}/api/create-customer-and-subscribe-to-plan", requestOptions)
            .then(response => response.json())
            .then(function(data) {
                console.log(data);
                processing.classList.add("d-none");
                showCardSuccess();
                sessionStorage.first_name = document.getElementById("first-name").value;
                sessionStorage.last_name = document.getElementById("last-name").value;
                sessionStorage.amount = "{{formatCurrency $widget.Price}}";
                sessionStorage.last_four = result.paymentMethod.card.last4;
                location.href = "/receipt/bronze";
            })

           
        }
    }

    (function (){
        //create stripe and it's element 
        const elements  = stripe.elements();
        const style = {
            base: {
                lineHeight:'25px',
                fontSize:'16px',
            }
        };


        card = elements.create('card', {
            style:style,
            hidePostalCode: true,
        });

        card.mount("#card-element")

        card.addEventListener('change', function(event){
        
             var displayError = document.getElementById("card-errors")

             if (event.error){
                displayError.classList.remove('d-none')
                displayError.textContent = event.error.message
             }else {
                displayError.classList.add('d-none')
                displayError.textContent = ""

             }
        })
    })();
</script>
{{end}}